var documenterSearchIndex = {"docs":
[{"location":"literature/#References","page":"References","title":"References","text":"","category":"section"},{"location":"literature/","page":"References","title":"References","text":"Here below you can find an extensive review of works based on the adopted method. If you use this code for any of you analyses, please cite either this package or one of the papers associated to its theoretical developments. As researchers, our scientific impact determines our possibilities to mantain these package and provide further improvements. ","category":"page"},{"location":"literature/#ParMech","page":"References","title":"ParMech","text":"","category":"section"},{"location":"literature/#Theory-and-applications","page":"References","title":"Theory and applications","text":"","category":"section"},{"location":"literature/","page":"References","title":"References","text":"A. Vizzaccaro, A. Opreni, L. Salles, A. Frangi, C. Touzé. High order direct parametrisation of invariant manifolds for model order reduction of finite element structures: application to large amplitude vibrations and unconvering of a folding point. arXiv, 2109.10031, 2021\nA. Opreni, A. Vizzaccaro, A. Frangi, C. Touzé. Model order reduction based on direct normal form: application to large finite element MEMS structures featuring internal resonance. Nonlinear Dynamics, 105, pp. 1237-1272, 2021\nY. Shen, A. Vizzaccaro, N. Kesmia, T. Yu, L. Salles, O. Thomas, C. Touzé. Comparison of Reduction Methods for Finite Element Geometrically Nonlinear Veam Structures. Vibrations, 4(1), pp. 175-204, 2021\nA. Vizzaccaro, Y. Shen, L. Salles, J. Blahoš, C. Touzé. Direct computation of nonlinear mappings via normal form for reduced-order models of finite element nonlinear structures. Computer Methods in Applied Mechanics and Engineering, 384, pp. 113957, 2021","category":"page"},{"location":"literature/#Existing-literature","page":"References","title":"Existing literature","text":"","category":"section"},{"location":"literature/","page":"References","title":"References","text":"M. Li, G. Haller. Nonlinear analysis of forced mechanical systems with internal resonance using spectral submanifolds–Part II: Bifurcation and quasi-periodic response, 2108.08152, 2021\nM. Li, S. Jain, G. Haller. Nonlinear analysis of forced mechanical systems with internal resonance using spectral submanifolds–Part I: Periodic response and forced response curve. arXiv, 2106.05162, 2021\nS. Jain, G. Haller. How to compute invariant manifolds and their reduced dynamics in highdimensional finite-element models?. Nonlinear dynamics, in press, 2021\nB. Barker, J. James, J. Morgan. Parameterization Method for Unstable Manifolds of Standing Waves on the Line. SIAM Journal on Applied Dynamical Systems, 19(3), pp. 1758-1797, 2020\nJ. Gonzalez, J. James, N. Tuncer. Finite element approximation of invariant manifolds by the parameterization method","category":"page"},{"location":"literature/#Similar-works","page":"References","title":"Similar works","text":"","category":"section"},{"location":"literature/","page":"References","title":"References","text":"S. Jain, T. Thurnher, M. Li, G. Haller. SSMTool-2.0: Computation of invariant manifolds & their reduced dynamics in high-dimensional mechanics problems","category":"page"},{"location":"sponsors/#Sponsors","page":"-","title":"Sponsors","text":"","category":"section"},{"location":"sponsors/","page":"-","title":"-","text":"We would like to say thank you to all private and public groups that contributed to our project.  This project would have never reached such level without your help.","category":"page"},{"location":"sponsors/","page":"-","title":"-","text":"(Image: image <>)","category":"page"},{"location":"supported_formats/#Mesh-format","page":"Supported Formats","title":"Mesh format","text":"","category":"section"},{"location":"supported_formats/#Elements","page":"Supported Formats","title":"Elements","text":"","category":"section"},{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In this section you can find a series of tutorials aimed at helping new users in creating their own working environment, create analyses and use the derived reduced models for nonlinear dynamic analyses.","category":"page"},{"location":"tutorials/#Environment-setup","page":"Tutorials","title":"Environment setup","text":"","category":"section"},{"location":"tutorials/#Create-an-analyses-environemnt","page":"Tutorials","title":"Create an analyses environemnt","text":"","category":"section"},{"location":"tutorials/#Run-your-first-analysis","page":"Tutorials","title":"Run your first analysis","text":"","category":"section"},{"location":"tutorials/#Add-materials-and-geometries","page":"Tutorials","title":"Add materials and geometries","text":"","category":"section"},{"location":"tutorials/#Manage-different-domains-and-boundary-conditions","page":"Tutorials","title":"Manage different domains and boundary conditions","text":"","category":"section"},{"location":"tutorials/#Example-analyses","page":"Tutorials","title":"Example analyses","text":"","category":"section"},{"location":"tutorials/#Single-mode-reduction","page":"Tutorials","title":"Single mode reduction","text":"","category":"section"},{"location":"tutorials/#Multiple-modes-reduction","page":"Tutorials","title":"Multiple modes reduction","text":"","category":"section"},{"location":"tutorials/#Parametric-amplification","page":"Tutorials","title":"Parametric amplification","text":"","category":"section"},{"location":"overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"This package develops reduced models for continuum structures using a technique called Direct Parametrization of Invarint Manifolds. The method parametrizes the system motion along an invariant manifold of the system by introducing a nonlinear change of coordinates between the model coordinates and the reduced model coordinates.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"mathbfU = boldsymbolPsi(mathbfmathrmz) quad mathbfV = boldsymbolUpsilon(mathbfmathrmz)","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"with mathbfU displacement field, mathbfV velocity field, and boldsymbolPsi(mathbfmathrmz) and boldsymbolUpsilon(mathbfmathrmz) nonlinear function of the normal coordinates mathbfmathrmz. Furthermore, the method provides the dynamics of the reduced model:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"dotmathbfmathrmz = mathbff(mathbfmathrmz)","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"with mathbff(mathbfmathrmz) polynomial law in mathbfmathrmz. If the original system is non autonomous, then auxiliary variables are added to recast the system as autonomous. ","category":"page"},{"location":"authors/#Who-are-we?","page":"Authors","title":"Who are we?","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"We would like to say thank you to all people that contributed to this work since we believe that this tool will play a vital role in improving the design of mechanical structures. Here you can find information about everyone who provided a step forward towards the development of this method and code.","category":"page"},{"location":"authors/#Main-authors","page":"Authors","title":"Main authors","text":"","category":"section"},{"location":"authors/#**Andrea-Opreni**","page":"Authors","title":"Andrea Opreni","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"(Image: image <>)","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"He received the M.Sc. in materials engineering and nanotechnology from the Politecnico di Milano, Italy, in 2018, where he is currently pursuing a Ph.D. degree in Structural, Seismic, and Geotechnocal engineering at the Department of Civil and Environmental Engineering. His research focuses on numerical algorithms for nonlinear dynamic systems, with emphasis to dimensionality reduction tehcniques applied to continuum structures.","category":"page"},{"location":"authors/#**Alessandra-Vizzaccaro**","page":"Authors","title":"Alessandra Vizzaccaro","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"(Image: image <>)","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"She received the M.Sc. in mechanical engineering from the Sapienza Università di Roma in 2015 and the Ph.D. in mechanical engineering from the Imperial College London in 2020. Her research focuses on analytical and numerical methods for vibrating structures. Special emphasis is dedicated to the development of direct parametrization of invariant manifold techniques for dimensionality reduction in continuum structures. ","category":"page"},{"location":"authors/#**Attilio-Frangi**","page":"Authors","title":"Attilio Frangi","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"(Image: image <>)","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"He received the M.Sc. degree in aeronautical engineering and the Ph.D. in structural engineering from the Politecnico di Milano, Italy, in 1994 and 1998, respectively. From 2001 to 2014, he was an Associate professor with the Department of Mechanics, Ecole Polytechnique, France. He is currently a Full professor with the Department of Civil and Environmental Engineering, Politecnico di Milano. He has authored more than 150 publications in the field of computational mechanics with a special focus on the simulation of multiphysics phenomena in microsystems. ","category":"page"},{"location":"authors/#**Cyril-Touzé**","page":"Authors","title":"Cyril Touzé","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"(Image: image <>)","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"FILL WITH DEGREE AND PHD. He is currenlty full professor at the Institute of Mechanical Sciences and Industrial Applications (IMSIA). He has authored more than 120 publications in the vield of structural vibrations with special dedication to nonlinear dynamic phenomena in structures actuated at large displacements and dimensionlity reduction with normal form approaches. ","category":"page"},{"location":"authors/#Collaborators","page":"Authors","title":"Collaborators","text":"","category":"section"},{"location":"authors/#**Loïc-Salles**","page":"Authors","title":"Loïc Salles","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"(Image: image <>)","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"He received the M.Sc. in mechanical engineering and the Ph.D. in computational mechanics from the Ecole Centrale de Lyon in 2006 and 2010, respectively. He is currently a Research Fellow in Rolls-Royce Vibration UTC in the Mechanical Engineering department. He joined Imperial College in 2012. His research focuses in nonlinear vibration and computational method for large scale modelling.","category":"page"},{"location":"authors/#**Adrien-Martin**","page":"Authors","title":"Adrien Martin","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"FILL","category":"page"},{"location":"#MORFEInvariantManifold.jl","page":"Home","title":"MORFEInvariantManifold.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package exploits the direct parametrization of invariant manifolds technique to generate accurate reduced models of structures subjected to geometric nonlinearities","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfMddotmathbfU+mathbfCdotmathbfU+mathbfF(mathbfU)= mathbfT(t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"with mathbfM mass matrix, mathbfC damping matrix, mathbfU nodal displacement vector, mathbfF(mathbfU) internal force vector, and mathbfT(t) external forcing vector. Currently, the method provides Rayleigh damping as dissipation model, hence the matrix mathbfC has the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfC = alphamathbfM + beta mathbfK","category":"page"},{"location":"","page":"Home","title":"Home","text":"with alpha and beta non-negative scalars. The internal force term mathbfF(mathbfU) is obtained under the assumption of Saint Venant - Kirchhoff constitutive model:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfF(mathbfU) = mathbfKmathbfU + mathbfG(mathbfUmathbfU) + mathbfH(mathbfUmathbfUmathbfU)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The packages allows parametrizing also the unforced and undamped version of the model","category":"page"},{"location":"","page":"Home","title":"Home","text":"One particoular feature of this package is that it embeds its own finite element solver. This implies that upon installation the user can create its personalised database for materials and meshes. Furthermore, we provide a set of functions to exploit well established continuation packages as BifurcationKit, ManLab, and MatCont for refined analysis on the resulting reduced models. ","category":"page"},{"location":"library_all/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library_all/","page":"Library","title":"Library","text":"Modules = [MORFEInvariantManifold]","category":"page"},{"location":"library_all/#MORFEInvariantManifold.BE2n","page":"Library","title":"MORFEInvariantManifold.BE2n","text":"Number of nodes of a linear line element (2)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.BE3n","page":"Library","title":"MORFEInvariantManifold.BE3n","text":"Number of nodes of a quadratic line element (3)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.H20n","page":"Library","title":"MORFEInvariantManifold.H20n","text":"Number of nodes of a quadratic serendipity hexahedral element (20)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.H27n","page":"Library","title":"MORFEInvariantManifold.H27n","text":"Number of nodes of a quadratic Lagrange hexahedral element (27)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.HE8n","page":"Library","title":"MORFEInvariantManifold.HE8n","text":"Number of nodes of a linear hexahedral element (8)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.P15n","page":"Library","title":"MORFEInvariantManifold.P15n","text":"Number of nodes of a quadratic 15-nodes wedge element (15)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.P18n","page":"Library","title":"MORFEInvariantManifold.P18n","text":"Number of nodes of a quadratic 18-nodes wedge element (18)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.PE6n","page":"Library","title":"MORFEInvariantManifold.PE6n","text":"Number of nodes of a linear wedge element (6)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.QU4n","page":"Library","title":"MORFEInvariantManifold.QU4n","text":"Number of nodes of a linear square element (4)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.QU8n","page":"Library","title":"MORFEInvariantManifold.QU8n","text":"Number of nodes of a quadratic serendipity square element (8)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.QU9n","page":"Library","title":"MORFEInvariantManifold.QU9n","text":"Number of nodes of a quadratic Lagrange square element (9)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.Snse","page":"Library","title":"MORFEInvariantManifold.Snse","text":"Number of supported boundary element\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.T10n","page":"Library","title":"MORFEInvariantManifold.T10n","text":"Number of nodes of a quadratic tetrahedral element (10)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.TE4n","page":"Library","title":"MORFEInvariantManifold.TE4n","text":"Number of nodes of a linear tetrahedral element (4)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.TR3n","page":"Library","title":"MORFEInvariantManifold.TR3n","text":"Number of nodes of a linear triangular element (3)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.TR6n","page":"Library","title":"MORFEInvariantManifold.TR6n","text":"Number of nodes of a quadratic triangular element (6)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.VE1n","page":"Library","title":"MORFEInvariantManifold.VE1n","text":"Number of nodes of a vertex (1)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.Vnse","page":"Library","title":"MORFEInvariantManifold.Vnse","text":"Number of supported volume element\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.dim","page":"Library","title":"MORFEInvariantManifold.dim","text":"Dimension of the treated problems (3D)\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.ncv_max","page":"Library","title":"MORFEInvariantManifold.ncv_max","text":"Maximum number of elements connected one to the other\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.nne_max","page":"Library","title":"MORFEInvariantManifold.nne_max","text":"Maximum number nodes for an element\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.ϵ_tol","page":"Library","title":"MORFEInvariantManifold.ϵ_tol","text":"resonances tolerance\n\n\n\n\n\n","category":"constant"},{"location":"library_all/#MORFEInvariantManifold.Boundary","page":"Library","title":"MORFEInvariantManifold.Boundary","text":"mutable struct Boundary\n\nSen : number of supported elements\nSet : type of supported elements\nSenn : number of nodes of the supported elements\nne : number of elements of each type in the domain\ne2n : surface element connectivity\nbcdofs : which dofs are constrained\nbcvals : value associated to the boundary condition\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.Domain","page":"Library","title":"MORFEInvariantManifold.Domain","text":"mutable struct Domain\n\nSen : number of supported elements\nSet : type of supported elements\nSenn : number of nodes of the supported elements\nne : number of elements of each type in the domain\ne2n : volume element connectivity\nmat : material associated to the domain\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.Field","page":"Library","title":"MORFEInvariantManifold.Field","text":"mutable struct Field\n\nneq : number of equations\nnen : total number of entries\ncpn : nodal uknowns per node\ndof : dofs ordering\nval : field values\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.Field-Tuple{MORFEInvariantManifold.Grid, Int64}","page":"Library","title":"MORFEInvariantManifold.Field","text":"Field(mesh::Grid, cpn::Int64)\n\nField constructor\n\nmesh : Grid \ncpn : number of nodal unknowns per node\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.Grid","page":"Library","title":"MORFEInvariantManifold.Grid","text":"mutable struct grid\n\nnetype : number of supperted types of elements\netype : array that stores the number of nodes for each element\nnn : number of nodes\nnΩ : number of domains\nnΓ : number of boundaries\nn2c : nodes coordinates\nΩ : domains\nΓ : boundaries\ntcn : total cells number\ngrid() : empty initialization method\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.NodalConnectivity","page":"Library","title":"MORFEInvariantManifold.NodalConnectivity","text":"struct NodalConnectivity\n\nnval : number of nodes + 1\nnreg : total size of the nodal connectivity\nregister : bookkeeping nodes to nodes connectivity in compact sparse format\nvalues : stored node to node connectivity\nmaxr : FILL\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.NodalConnectivity-Tuple{MORFEInvariantManifold.Grid}","page":"Library","title":"MORFEInvariantManifold.NodalConnectivity","text":"NodalConnectivity(mesh::Grid)\n\nNodalConnectivity main constructor.\n\nmesh : Grid\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.Parametrisation","page":"Library","title":"MORFEInvariantManifold.Parametrisation","text":"mutable struct Parametrisation\n\nnc : number of monomial combinations\nW : mappings [Υ, Ψ]\nf : reduced dynamics\nnlr : nonlinear right hand side\ncomb : combinations the system is solved for\nconj : conjugacy relations\ncmap : mapping index combinations\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.material","page":"Library","title":"MORFEInvariantManifold.material","text":"struct material\n\nρ : density of the material\nDᵢⱼₖₗ : fourth order elasticity tensor in Voigt notation\n\n\n\n\n\n","category":"type"},{"location":"library_all/#MORFEInvariantManifold.MORFE_mech_autonomous","page":"Library","title":"MORFEInvariantManifold.MORFE_mech_autonomous","text":"MORFEmechautonomous(meshfile,domainslist,materials,boundarieslist,constraineddof,bcvals,α,β,Φₗᵢₛₜ,style,maxorder,neig=0,nls=0)\n\nParametrisation of the autonomous system:\n\nmathbfMddotmathbfU+mathbfCdotmathbfU+mathbfF(mathbfU)=0\n\nmesh_file : name of the mesh file with extension\ndomains_list : tags of domains included in the analysis\nmaterials : materials associated to each domain\nboundaries_list : list of all boundaries included in the analysis\nconstrained_dof : list of constrained degrees of freedom\nbc_vals : value of the boundary condition\nα : mass-proportional damping coefficient\nβ : stiffness-proportional damping coefficient\nΦₗᵢₛₜ : list of the master modes included in the analysis\nstyle : parametrisation style\nmax_order : maximum order of the asymptotic development\nneig : number of eigenvalues. If not used, then neig = maximum(Φₗᵢₛₜ)\nnls : nonlinear static analysis. 0 = no, 1 = yes.\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.MORFE_mech_nonautonomous","page":"Library","title":"MORFEInvariantManifold.MORFE_mech_nonautonomous","text":"MORFEmechautonomous(meshfile,domainslist,materials,boundarieslist,constraineddof,bcvals,Ωlist,κmodes,κlist,κphase,α,β,Φₗᵢₛₜ,style,maxordera,maxorder_na,neig=0,nls=0)\n\nParametrisation of the autonomous system:\n\nmathbfMddotmathbfU+mathbfCdotmathbfU+mathbfF(mathbfU)=mathbfF(t)\n\nmesh_file : name of the mesh file with extension\ndomains_list : tags of domains included in the analysis\nmaterials : materials associated to each domain\nboundaries_list : list of all boundaries included in the analysis\nconstrained_dof : list of constrained degrees of freedom\nbc_vals : value of the boundary condition\nΩ_list : list of forcing frequencies\nκ_modes : load multiplier associated to each forcing term\nκ_list : shape of each forcing\nκ_phase : identification of the forcing phase. \"c\" = cosine, \"s\" = sine\nα : mass-proportional damping coefficient\nβ : stiffness-proportional damping coefficient\nΦₗᵢₛₜ : list of the master modes included in the analysis\nstyle : parametrisation style\nmax_order : maximum order of the asymptotic development\nneig : number of eigenvalues. If not used, then neig = maximum(Φₗᵢₛₜ)\nnls : nonlinear static analysis. 0 = no, 1 = yes.\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:H20}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:H20}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:H20}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:H27}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:H27}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:H27}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:HE8}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:HE8}})\n\nIt fills N with the shape functions of a H8 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:HE8}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:P15}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:P15}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:P15}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:P18}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:P18}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:P18}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:PE6}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:PE6}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:PE6}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:T10}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:T10}})\n\nIt fills N with the shape functions of a T10 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:T10}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:TE4}}}","page":"Library","title":"MORFEInvariantManifold.N!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:TE4}})\n\nIt fills N with the shape functions of a T4 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:TE4}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.N27!-Tuple{Array{Float64, N} where N, Tuple}","page":"Library","title":"MORFEInvariantManifold.N27!","text":"N!(N::Array{Float64},gp::Tuple,::Type{Val{:H27}})\n\nIt fills N with the shape functions of a PE6 element evaluated at gauss point gp.\n\nN : shape functions Array\ngp : gauss point coordinates\n:Type{Val{:H27}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.add_material-Tuple{String, Float64, Float64, Float64}","page":"Library","title":"MORFEInvariantManifold.add_material","text":"add_material( name::String, ρ::Float64, E::Float64, ν::Float64 )\n\nIt adds an isotropic material to the internal database of the package.\n\nname = name of the material\nρ = density of the material\nE = Young's modulus \nν = Poisson's ratio\n\nreturn  nothing\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.add_material-Tuple{String, Float64, Matrix{Float64}}","page":"Library","title":"MORFEInvariantManifold.add_material","text":"add_material( name::String, ρ::Float64, Dᵢⱼₖₗ::Matrix{Float64} )\n\nIt adds an anisotropic material to the internal database of the package.\n\nname = name of the material\nρ = density of the material\nDᵢⱼₖₗ = fourth order elasticity tensor\n\nreturn  nothing\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.append_rdyn_frequency!-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.append_rdyn_frequency!","text":"appendrdynfrequency!(rdyn,ndofs,ith_Ω)\n\nIt appends auxiliary variables required to recast the non-autonomous reduced dynamics as autonomous\n\nrdyn : reduced dynamics\nndofs : number of degrees of freedom\nith_Ω : integer represeting which excitation frequency you are exciting\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly!-Tuple{SparseArrays.SparseMatrixCSC, Float64, Int64, Int64}","page":"Library","title":"MORFEInvariantManifold.assembly!","text":"assembly!(K::SparseMatrixCSC, val::Float64, ir::Int64, jc::Int64)\n\nAssembly value in sparse matrix using binary search\n\nK : global matrix \nval : value to assemble\nir : row entry\njc : column entry\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_G_nl!","page":"Library","title":"MORFEInvariantManifold.assembly_G_nl!","text":"assemblyGnl!(Cp, entry,Ψ₁, Ψ₂,mesh, U, mult = 1.0)\n\nIt assemblies quadratic nonlinearities operator\n\n$ G(Ψ₁,Ψ₂) = \\frac{1}{2} ∫_{Ω} γ(Ψ₁,Ψ₂):\\mathcal{A}:ε(w) + γ(Ψ₁,w):\\mathcal{A}:ε(Ψ₂) + γ(w,Ψ₂):\\mathcal{A}:ε(Ψ₁) dΩ $\n\nCp : parametrisation data structure\nentry : entrance of the reference array\nΨ₁ : mapping\nΨ₂ : mapping\nmesh : mesh data structure\nU : displacement field\nmult : integral multiplier\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.assembly_H_nl!","page":"Library","title":"MORFEInvariantManifold.assembly_H_nl!","text":"assemblyHnl!(Cp, entry,Ψ₁, Ψ₂, Ψ₃,mesh, U, mult = 1.0)\n\nIt assemblies cubic nonlinearities operator\n\n$ G(Ψ₁,Ψ₂,Ψ₃) = \\frac{1}{6} ∫_{Ω} γ(Ψ₁,Ψ₂):\\mathcal{A}:γ(Ψ₃,w) + γ(Ψ₁,Ψ₃):\\mathcal{A}:γ(Ψ₂,w) + γ(Ψ₃,Ψ₂):\\mathcal{A}:γ(Ψ₁,w) dΩ $\n\nCp : parametrisation data structure\nentry : entrance of the reference array\nΨ₁ : mapping\nΨ₂ : mapping\nΨ₃ : mapping\nmesh : mesh data structure\nU : displacement field\nmult : integral multiplier\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.assembly_MCK!-Tuple{MORFEInvariantManifold.Grid, MORFEInvariantManifold.Field, SparseArrays.SparseMatrixCSC, SparseArrays.SparseMatrixCSC, SparseArrays.SparseMatrixCSC, Float64, Float64}","page":"Library","title":"MORFEInvariantManifold.assembly_MCK!","text":"assembly_MCK!(mesh::Grid, U::Field, M::SparseMatrixCSC, C::SparseMatrixCSC, K::SparseMatrixCSC, α::Float64, β::Float64)\n\nIt assemblies mass, damping, and stiffness matrices\n\nmesh : Grid \nU : displacement field\nM : mass matrix\nC : damping matrix\nK : stiffness matrix\nα : Rayleigh damping mass proportional coefficient\nβ : Rayleigh damping stiffness proportional coefficient\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_cubic_nl!-NTuple{7, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_cubic_nl!","text":"assemblycubicnl!(Cp,entry,ic,ndofs,p,mesh,U)\n\nIt assembles cubic nonlinearities vector for a given monomial I of order p\n\nCp : parametrisation data structure\nentry : index entry \nic : index combination of the monomial\nndofs : number or degrees of freedom\np : order of the asymptotic development\nmesh : grid data structure\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_cubic_nl_veps!-NTuple{8, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_cubic_nl_veps!","text":"assemblycubicnl_veps!(Cp,Cp⁺,entry,Cic,ndofs,p,mesh,U)\n\nIt computes cubic nonlinearity vectors for all monomials of order p of the non-autonomous asymptotic development\n\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nentry : array entry of a given monomial\nic : index combination associated to a monomial\nndofs : number of degrees of freedom\np : order of the asymptotic development\nmesh : grid data structure\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_forcing_vector!-Tuple{MORFEInvariantManifold.Parametrisation, MORFEInvariantManifold.Grid, MORFEInvariantManifold.Field, Any, Any, Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_forcing_vector!","text":"assemblyforcingvector!(Cp⁺,mesh,U,M,ϕ,κmodes,κlist,κ_phase)\n\nIt assemblies the non-autonomous forcing vector\n\n$ \\mathbf{F} = ∑_{i=1}^{N} κᵢMϕᵢ $\n\nCp⁺ : no-autonomous parametrisation data structure\nmesh : mesh data structure\nU : displacement field\nM : mass matrix\nϕ : eigenmodes\nκ_modes : list of forced modes\nκ_list : forcing amplitude κᵢ\nκ_phase : phase of the applied forcing\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_mat_sym!-Tuple{SparseArrays.SparseMatrixCSC, Matrix{Float64}, Array{Int64, N} where N, Int64}","page":"Library","title":"MORFEInvariantManifold.assembly_mat_sym!","text":"assemblymatsym!(K::SparseMatrixCSC,Kₑ::Matrix{Float64},dofs::Array{Int64},rl::Int64)\n\nIt assembles elemental matrices into sparse matrices. Is assumes CSC format with lower triangular.\n\nK : global matrix \nKₑ : elemental matrix\ndofs : degrees of freedom \nrl : row length\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_quadratic_nl!-NTuple{8, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_quadratic_nl!","text":"assemblyquadraticnl!(Cp,entry,ic,ndofs,p,mesh,U,nls)\n\nIt assembles quadratic nonlinearities vector for a given monomial I of order p\n\nCp : parametrisation data structure\nentry : index entry \nic : index combination of the monomial\nndofs : number or degrees of freedom\np : order of the asymptotic development\nmesh : grid data structure\nU : displacement field\nnls : tag for nonlinear static analysis. 0 = no, 1 = yes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_quadratic_nl_veps!-NTuple{9, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_quadratic_nl_veps!","text":"assemblycubicnl_veps!(Cp,Cp⁺,entry,Cic,ndofs,p,mesh,U)\n\nIt computes quadratic nonlinearity vectors for all monomials of order p of the non-autonomous asymptotic development\n\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nentry : array entry of a given monomial\nic : index combination associated to a monomial\nndofs : number of degrees of freedom\np : order of the asymptotic development\nmesh : grid data structure\nU : displacement field\nnls : nonlinear static solution. 0 = no, 1 = yes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_sys_mat!-NTuple{8, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_sys_mat!","text":"assemblysysmat!(Cp,sysmat,M,C,K,σ,resonantmodes,ndofs)\n\nit assembles the linear system associated to a homological equation\n\nCp : parametrisation structure\nsys_mat : matrix associated to the homological equation\nM : mass matrix\nC : damping matrix\nK : stiffness matrix\nσ : summation of eigenvalues λ\nresonant_modes : book-keeping of the set R of resonant modes\nndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_sys_rhs!-NTuple{10, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_sys_rhs!","text":"assemblysysrhs!(Cp,sysrhs,sysres,M,C,comb,p,ndofs,σ,resonant_modes)\n\nIt assembles the right hand side of a given homological equation of the ε⁰-developmet\n\nCp : parametrisation structure\nsys_rhs : right hand side of the homological equations\nsys_res : residual of the homological equations\nM : mass matrix\nC : damping matrix\ncomb : reference monomial index\np : order of the asymptotic development\nndofs : number of degrees of freedom\nσ : eingevalues λ summation\nresonant_modes : book-keeping of the set R of resonant modes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_sys_rhs_veps!-NTuple{11, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_sys_rhs_veps!","text":"assemblysysrhs!(Cp,Cp⁺,sysrhs,sysres,M,C,comb,p,ndofs,σ,resonant_modes)\n\nIt assembles the right hand side of a given homological equation of the ε⁰-developmet\n\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nsys_rhs : right hand side of the homological equations\nsys_res : residual of the homological equations\nM : mass matrix\nC : damping matrix\ncomb : reference monomial index\np : order of the asymptotic development\nndofs : number of degrees of freedom\nσ : eingevalues λ summation\nresonant_modes : book-keeping of the set R of resonant modes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_μ_ν_resid!-NTuple{6, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_μ_ν_resid!","text":"assemblyμν_resid!(Cp,entry,ic,ndofs,p,neq)\n\nIt assembles μ and ν for a given monomial I of order p for the ε⁰ development. \n\nCp : parametrisation data structure\nentry : entry associated to a monomial combination\nic : monomial index combination\nndofs : number of degrees of freedom\np : order of the asymptotic development\nneq : number of equations\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.assembly_μ_ν_resid_veps!-NTuple{7, Any}","page":"Library","title":"MORFEInvariantManifold.assembly_μ_ν_resid_veps!","text":"recursiveassemblyveps!(Cp,Cp⁺,ndofs,p,mesh,U,Cic,cc,nls=0)\n\nIt assembles right hand sides of all homological equations for a given order p of the expansion.\n\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nentry : array entry of a given monomial\nic : index combination associated to a monomial\nndofs : number of degrees of freedom\np : order of the asymptotic development\nneq : number of equations\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.check_resonances!-NTuple{5, Any}","page":"Library","title":"MORFEInvariantManifold.check_resonances!","text":"checkresonances!(Cp,σ,ndofs,style,resonantmodes)\n\nIt checks which mode is resonant. It complies with the chosen style.\n\nCp : parametrisation data structure\nσ : summation of eigenvalues λ\nndofs : number of degrees of freedom\nstyle : parametrisation style\nresonant_modes : book-keeping of the set R of resonant modes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.compute_ncomb-Tuple{Int64, Int64}","page":"Library","title":"MORFEInvariantManifold.compute_ncomb","text":"compute_ncomb(param,order,ndofs,neq)\n\nIt computes the monomials combinations that need to be computed\n\np : order of the expansion\nndofs : number of degrees of freedom of the reduced model\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.delete_material-Tuple{String}","page":"Library","title":"MORFEInvariantManifold.delete_material","text":"delete_materials()\n\nIt delets a material in the database.\n\nname = name of the material to delete\n\nreturn  nothing\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.dofs!-Tuple{MORFEInvariantManifold.Field, Int64, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}, Vector{Int64}}","page":"Library","title":"MORFEInvariantManifold.dofs!","text":"dofs!(ϕ::Field, nn::Int64, nodes::SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, dofs::Vector{nt64})\n\nIt copies the dofs associated to nodes list nodes into dofs. This version accepts SubArrays.\n\nϕ : field of interest \nnn : number of queries\nnodes : list of nodes\ndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.dofs!-Tuple{MORFEInvariantManifold.Field, Int64, Vector{Int64}, Vector{Int64}}","page":"Library","title":"MORFEInvariantManifold.dofs!","text":"dofs!(ϕ::Field, nn::Int64, nodes::Vector{Int64}, dofs::Vector{nt64})\n\nIt copies the dofs associated to nodes list nodes into dofs.\n\nϕ : field of interest \nnn : number of queries\nnodes : list of nodes\ndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.dofs_vals!-Tuple{MORFEInvariantManifold.Field, Int64, Vector{Int64}, Vector{Int64}, Vector{Float64}}","page":"Library","title":"MORFEInvariantManifold.dofs_vals!","text":"dofs_vals!(ϕ::Field, nn::Int64, nodes::Vector{Int64}, dofs::Vector{Int64}, vals::Vector{Float64})\n\nIt copies the dofs and values associated to nodes list nodes into dofs and vals.\n\nϕ : field of interest \nnn : number of queries\nnodes : list of nodes\ndofs : number of degrees of freedom\nvals : values of the field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_C-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.export_C","text":"export_C(odir,coeff,ndofs)\n\nit saves the monomials exponents.\n\nodir : output directory\ncoeff : exponents of the monomial\nndofs : number of degrees of freedom of the reduced model\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_M-NTuple{6, Any}","page":"Library","title":"MORFEInvariantManifold.export_M","text":"export_M(Wr,comb,odir,M,Φ,neig)\n\nit saves the mass-wieighted projections of the mappings onto the computed modal basis.\n\nWr : realified mapping of order p\ncomb : saved index combination\nodir : output directory\nM : mass-matrix\nΦ : eigenmodes\nneig : number of computed eigenmodes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_W-NTuple{4, Any}","page":"Library","title":"MORFEInvariantManifold.export_W","text":"exportW(Ψ,Υ,coeff,U,odirW)\n\nit saves the realified mappings\n\nΨ : realified displacement mapping\nΥ : realified velocity mapping\nodir : output directory\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_data!-NTuple{13, Any}","page":"Library","title":"MORFEInvariantManifold.export_data!","text":"exportdata!(Cp,Wr,fr,p,ndofs,U,M,Φ,neig,odirC,odirW,odirf,odir_M)\n\nIt saves the output of a given order of the parametrisation procedure. Only realified quantities are saved.\n\nCp : order p of a given parametrisation\nWr : realified mapping of order p\nfr : realified reduced dynamics of order p\np : order of the asymptotic expansion\nndofs : number of degrees of freedom\nU : displacement field\nM : mass matrix\nΦ : eigenmodes list\nneig : number of computed eigenvalues\nodir_C : path to the folder that stores monomials exponents\nodir_W : path to the folder that stores the realified mappings\nodir_f : path to the folder that stores the realified reduced dynamics\nodir_M : path to the folder that stores the mass-wiedghted projected mappings onto the computed modes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_data_veps!-NTuple{17, Any}","page":"Library","title":"MORFEInvariantManifold.export_data_veps!","text":"exportdataveps!(Cp,Wr,fr,p,ndofs,U,M,Φ,neig,odirCc, odirWc, odirfc, odirMc, odirCs, odirWs, odirfs, odirMs)\n\nIt saves the output of a given order of the non-autonomous parametrisation procedure. Only realified quantities are saved.\n\nCp : order p of a given parametrisation\nWr : realified mapping of order p\nfr : realified reduced dynamics of order p\np : order of the asymptotic expansion\nndofs : number of degrees of freedom\nU : displacement field\nM : mass matrix\nΦ : eigenmodes list\nneig : number of computed eigenvalues\nodirCc : path to the folder that stores monomials exponents, cosine harmonic\nodirWc : path to the folder that stores the realified mappings, cosine harmonic\nodirfc : path to the folder that stores the realified reduced dynamics, cosine harmonic\nodirMc : path to the folder that stores the mass-wiedghted projected mappings onto the computed modes, cosine harmonic\nodirCs : path to the folder that stores monomials exponents, sine harmonic\nodirWs : path to the folder that stores the realified mappings, sine harmonic\nodirfs : path to the folder that stores the realified reduced dynamics, sine harmonic\nodirMs : path to the folder that stores the mass-wiedghted projected mappings onto the computed modes, sine harmonic\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_eig-Tuple{MORFEInvariantManifold.Grid, MORFEInvariantManifold.Field, Vector{Float64}, Matrix{Float64}, String, Int64}","page":"Library","title":"MORFEInvariantManifold.export_eig","text":"exporteig(meshfile::String, U::fieldtype, λ::Vector{ComplexF64},ϕ::Matrix{ComplexF64},outdir::String)\n\nIt exports the eigenfunctions in vtk format and eigenfrequencies in .txt file\n\nmesh_file : name of the mesh file\nU : dummy field variable\nλ : eigenvalues\nϕ : eigenfunctions\nout_dir : output directory\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.export_f-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.export_f","text":"export_f(fr,ndofs,odir)\n\nit saves the realified reduced dynamics.\n\nfr : realified reduced dynamics vector\nndofs : number of degrees of freedom of the reduced model\nodir : output directory\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_comb!-Tuple{Matrix{Int64}, Array{Int64, N} where N, Int64, Int64, Array{Int64, N} where N, Int64, Int64}","page":"Library","title":"MORFEInvariantManifold.fill_comb!","text":"fillcomb!(comb::Matrix{Int64},cmap::Array{Int64},ndofs::Int64,p::Int64,combs::Array{Int64},ithc::Int64,counter::Int64)\n\nIt fills the comb matrix with the associated exponentials\n\ncomb : matrix that stores the powers of the monomials\ncmap : total combinations map\nndofs : number of degrees of freedom\np : order of the asymptotic expansion\ncombs : combinations\nith_c : ith-combination\ncounter : recursion depth\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_mapping!-NTuple{5, Any}","page":"Library","title":"MORFEInvariantManifold.fill_mapping!","text":"fill_mapping!(Ψ,Υ,Wr,e,U)\n\nit copies the mappings but taking into account the global nodes ordering\n\nΨ : realified displacement mapping\nΥ : realified velocity mapping\nWr : realified mapping\ne : combination index\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_mapping_c!-NTuple{5, Any}","page":"Library","title":"MORFEInvariantManifold.fill_mapping_c!","text":"fill_mapping!(Ψ,Υ,Wr,e,U)\n\nit copies the mappings but taking into account the global nodes ordering. Cosine variant.\n\nΨ : realified displacement mapping\nΥ : realified velocity mapping\nWr : realified mapping\ne : combination index\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_mapping_s!-NTuple{5, Any}","page":"Library","title":"MORFEInvariantManifold.fill_mapping_s!","text":"fill_mapping!(Ψ,Υ,Wr,e,U)\n\nit copies the mappings but taking into account the global nodes ordering. Since variant.\n\nΨ : realified displacement mapping\nΥ : realified velocity mapping\nWr : realified mapping\ne : combination index\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_rdyn!-NTuple{5, Any}","page":"Library","title":"MORFEInvariantManifold.fill_rdyn!","text":"init_rdyn(ndofs)\n\nIt initializes the real-valued reduced dynamics in a format compatible with MATCONT\n\nndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_rdyn_c!-NTuple{4, Any}","page":"Library","title":"MORFEInvariantManifold.fill_rdyn_c!","text":"fillrdync!(rdyn,fr,i,ndofs)\n\nHarmonics realification step. Cosine variant.\n\nrdyn : realified reduced dynamics\nfr : reduced dynamics\ni : index combination\nndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_rdyn_s!-NTuple{4, Any}","page":"Library","title":"MORFEInvariantManifold.fill_rdyn_s!","text":"fillrdyns!(rdyn,fr,i,ndofs)\n\nHarmonics realification step. Sine variant.\n\nrdyn : realified reduced dynamics\nfr : reduced dynamics\ni : index combination\nndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.fill_rdyn_veps!-NTuple{6, Any}","page":"Library","title":"MORFEInvariantManifold.fill_rdyn_veps!","text":"fillrdynveps!(rdyn,ndofs,fr,Cp,p,ith_Ω)\n\nrdyn : reduced dynamics\nndofs : number of degrees of freedom\nfr : realified reduced dynamics\nCp : parametrisation of order p\np : order of the asymptotic development\nith_Ω : integer represeting which excitation frequency you are exciting\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.find_index_global-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.find_index_global","text":"findindexglobal(combs,ndofs,p)\n\nIt computes the position in the cmap array of a given combination\n\ncombs : total combinations\nndofs : number of degrees of freedom\np : order of the expansion\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.find_index_map-Tuple{Int64, Int64, Int64, Int64, Int64, Array{Int64, N} where N}","page":"Library","title":"MORFEInvariantManifold.find_index_map","text":"findindexmap(j::Int64,k::Int64,s::Int64,p::Int64,ndofs::Int64,index_comb::Array{Int64})\n\nIt finds the position of a map for a certain index_comb during time-derivatives residual calculation.\n\nj : counter\nk : counter\ns : counter\np : expansion order\nndofs : number of degrees of freedom\nindex_comb : reference monomials exponentials\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.find_index_rdyn-Tuple{Int64, Int64, Int64, Array{Int64, N} where N}","page":"Library","title":"MORFEInvariantManifold.find_index_rdyn","text":"findindexrdyn(j::Int64,k::Int64,ndofs::Int64,index_comb::Array{Int64})\n\nIt finds the position of a reduced dynamics vector for a certain index_comb during time-derivatives residual calculation.\n\nj : counter\nk : counter\nndofs : number of degrees of freedom\nindex_comb : reference monomials exponentials\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.find_position_g-Tuple{Int64, Int64, Int64, Array{Int64, N} where N}","page":"Library","title":"MORFEInvariantManifold.find_position_g","text":"findpositiong(j::Int64,p::Int64,ndofs::Int64,index_comb::Array{Int64})\n\nIt finds the maps position to compute their contribution to the quadratic nonlinearities.\n\nj : counter\np : order\nndofs : number of degrees of freedom\nindex_comb : reference monomials exponentials\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.find_position_h-Tuple{Int64, Int64, Int64, Int64, Array{Int64, N} where N}","page":"Library","title":"MORFEInvariantManifold.find_position_h","text":"findpositiong(j::Int64,k::Int64,p::Int64,ndofs::Int64,index_comb::Array{Int64})\n\nIt finds the maps position to compute their contribution to the cubic nonlinearities.\n\nj : counter\nk : counter\np : order\nndofs : number of degrees of freedom\nindex_comb : reference monomials exponentials\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.generate_conj!-NTuple{7, Any}","page":"Library","title":"MORFEInvariantManifold.generate_conj!","text":"generate_conj!(conj,comb,cmap,ndofs,p,combs,nc)\n\nIt maps entries to their conjugate\n\nconj : conjugate\ncomb : matrix that stores the powers of the monomials\ncmap : total combinations map\nndofs : number of degrees of freedom\np : order of the asymptotic expansion\ncombs : combinations\nnc : number of combinations\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.generate_pmap!-Tuple{Matrix{Int64}, Array{Int64, N} where N, Int64, Int64, Array{Int64, N} where N, Array{Int64, N} where N, Int64}","page":"Library","title":"MORFEInvariantManifold.generate_pmap!","text":"generatepmap!(comb::Matrix{Int64},cmap::Array{Int64},ndofs::Int64,p::Int64,combs::Array{Int64},sortedcombs::Array{Int64},counter::Int64)\n\nIt computes combinations maps to account for indexes permutations.\n\ncomb : matrix that stores the powers of the monomials\ncmap : total combinations map\nndofs : number of degrees of freedom\np : order of the asymptotic expansion\ncombs : combinations\nsorted_combs : sorted combinations\ncounter : recursion depth\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.get_coor!-Tuple{MORFEInvariantManifold.Grid, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}, Vector{Float64}, Int64}","page":"Library","title":"MORFEInvariantManifold.get_coor!","text":"get_coor!(mesh::Grid, conn::SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}, X::Vector{Float64}, nn::Int64)\n\nit retrieves element nodes coordinates. \n\nmesh : Grid \nconn : connectivity of the element\nX : coordinates of the nodes in {x₁, y₁, z₁, ..., xₙ, yₙ, zₙ} format\nnn : number of nodes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.get_coor!-Tuple{MORFEInvariantManifold.Grid, Vector{Int64}, Vector{Float64}, Int64}","page":"Library","title":"MORFEInvariantManifold.get_coor!","text":"get_coor!(mesh::Grid, conn::Vector{Int64}, X::Vector{Float64}, nn::Int64)\n\nit retrieves element nodes coordinates. \n\nmesh : Grid \nconn : connectivity of the element\nX : coordinates of the nodes in {x₁, y₁, z₁, ..., xₙ, yₙ, zₙ} format\nnn : number of nodes\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.get_materials_path-Tuple{}","page":"Library","title":"MORFEInvariantManifold.get_materials_path","text":"getmaterialspath()\n\nIt returns the path associated to the material database return  pth::String\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.get_node_connectivity-Tuple{MORFEInvariantManifold.NodalConnectivity, Int64}","page":"Library","title":"MORFEInvariantManifold.get_node_connectivity","text":"NodalConnectivity(n2n::NodalConnectivity, node::Int64)\n\nIt returns a View containing which nodes are connector to node\n\nn2n : NodalConnectivity structure\nnode : node of interest\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.identity_tangency!-Tuple{MORFEInvariantManifold.Parametrisation, Int64, Int64, Array{Int64, N} where N, Matrix{Float64}, Array{Float64, N} where N, Array{Float64, N} where N, MORFEInvariantManifold.Field}","page":"Library","title":"MORFEInvariantManifold.identity_tangency!","text":"identity_tangency!(Cp::Parametrisation,nm::Int64,neq::Int64,Φₗᵢₛₜ::Array{Int64},ϕ::Matrix{ComplexF64},ω₀::Array{Float64},ζ₀::Array{Float64})\n\nIt fills the first order parametrization using eigenmodes and eigenvalues of the mechanical problem.\n\nCp : Parametrisation data structure\nnm : number of master modes\nneq : total number of equations\nΦₗᵢₛₜ : master modes list\nϕ : modes\nω₀ : eigenfrequencies\nζ₀ : damping coefficients\nU : displacement field\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.import_mesh!-Tuple{MORFEInvariantManifold.Grid, String, Any, Any, Vector{String}, Vector{Vector{Int64}}, Vector{Vector{Float64}}, Type{Val{:MED}}}","page":"Library","title":"MORFEInvariantManifold.import_mesh!","text":"importmesh!( mesh::Grid, meshfile::String, Ωlist::Vector{Vector{Int64}}, Γlist::Vector{Vector{Int64}}, mat::Vector{material}, bcdof::Vector{Vector{Int64}}, bcvals::Vector{Vector{Float64}}, ::Type{Val{:MED}})\n\nIt reads a MED mesh format\n\nmesh_file : name of the mesh file\nΩ_list : list of domains in which the structures is organised\nΓ_list : list of boundaries\nmat : list of materials associated to each domain\nbc_dof : list of constrained degrees of freedom of each boundary\nbc_vals : boundary condition values\n:MED : specializes function to read MED mesh format\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.increment_field!-Tuple{MORFEInvariantManifold.Field, Vector{Float64}}","page":"Library","title":"MORFEInvariantManifold.increment_field!","text":"increment_field!(ϕ::Field,U::Vector{Float64})\n\nit increments field values. ϕ.val += U\n\nϕ : field to update\nU : solution vector\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.init_rdyn-Tuple{Any}","page":"Library","title":"MORFEInvariantManifold.init_rdyn","text":"init_rdyn(ndofs)\n\nIt initializes the real-valued reduced dynamics in a format compatible with MATCONT\n\nndofs : number of degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.init_realification_matrix-Tuple{Int64}","page":"Library","title":"MORFEInvariantManifold.init_realification_matrix","text":"initrealificationmatrix(ndofs::Int64)\n\nIt initializes the matrix used to realify the system\n\n\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.init_symCSC-Tuple{MORFEInvariantManifold.Grid, MORFEInvariantManifold.Field, MORFEInvariantManifold.NodalConnectivity, Int64, String}","page":"Library","title":"MORFEInvariantManifold.init_symCSC","text":"init_symCSC(mesh::Grid, ϕ::Field, n2n::NodalConnectivity, naux::Int64, tp::String)\n\nIt initializes a symmetric CSC matrix from a field. It eventually add auxiliary equations.\n\nmesh : Grid\nϕ : field of interest \nnn : number of queries\nn2n : node-to-node connectivity\nnaux : number of auxiliary equations\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.initialize_parametrisation!","page":"Library","title":"MORFEInvariantManifold.initialize_parametrisation!","text":"initialize_parametrisation!(param,order,ndofs,neq)\n\nIt initializes a generic order of the asymptotic expansion\n\nparam : parametrisation\norder : order\nndofs : number of degrees of freedom of the reduced model\nneq   : number of equations\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.integrate_MK!-Tuple{Matrix{Float64}, Matrix{Float64}, Array{Float64, N} where N, Float64, Matrix{Float64}, Vector{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Int64, Symbol, Any}","page":"Library","title":"MORFEInvariantManifold.integrate_MK!","text":"integrate_MK!(Mₑ::Matrix{Float64},Kₑ::Matrix{Float64},X::Array{Float64},\n\nρ::Float64,Dᵢⱼₖₗ::Matrix{Float64}, N::Array{Float64},∂N∂a::Matrix{Float64},∂N∂x::Matrix{Float64}, sym∇::Matrix{Float64},Jac::Matrix{Float64}, Jac⁻¹::Matrix{Float64},nn,etype::Symbol) It integrates elemental and stiffness matrices\n\nMₑ : elemental mass matrix\nKₑ : elemental stiffness matrix\nX  : nodal coordinates\nρ : density\nDᵢⱼₖₗ : elasticity tensor\nN : shape functions\n∂N∂a : shape functions master derivatives\n∂N∂x : shape functions sparial derivatives\nsym∇ : 0.5*(∇(⋅)+ ∇ᵀ(⋅))\nJac : ∂x∂a\nJac⁻¹: ∂a∂x\nnn : nodes number\netype : element type\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.list_materials-Tuple{}","page":"Library","title":"MORFEInvariantManifold.list_materials","text":"list_materials()\n\nIt lists all materials in the database. return  nothing\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.load_material-Tuple{String}","page":"Library","title":"MORFEInvariantManifold.load_material","text":"load_material( name::String )\n\nIt loads the data structure from the database\n\nname : name of the material to load\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.make_output_dir-Tuple{String}","page":"Library","title":"MORFEInvariantManifold.make_output_dir","text":"makeoutputdir(mesh_file::String)\n\nIt creates the folder that stores the output of the analysis\n\nmesh_file : name of the mesh file\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.mass_normalization!-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.mass_normalization!","text":"mass_normalization!(ϕ,M,neig)\n\nModes are normalised such that ϕᵢMϕⱼ=δᵢⱼ\n\nϕ : eigenmodes\nM : mass matrix\nneig : number of computed eigenvalues\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.metric!-Tuple{Array{Float64, N} where N, Matrix{Float64}, Matrix{Float64}, Int64, Matrix{Float64}, Matrix{Float64}}","page":"Library","title":"MORFEInvariantManifold.metric!","text":"metric!(X::Array{Float64},∂N∂a::Matrix{Float64},\n\n      ∂N∂x::Matrix{Float64},nn::Int64,\n      Jac::Matrix{Float64},Jac⁻¹::Matrix{Float64})\n\nIt computes element metric\n\nX  : nodal coordinates\n∂N∂a : shape functions master derivatives\n∂N∂x : shape functions sparial derivatives\nnn : nodes number\nJac : ∂x∂a\nJac⁻¹: ∂a∂x\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:H20}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:H20}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:H20}} : twenty-nodes quadratic hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:H27}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:H27}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:H27}} : twentyseven-nodes quadratic hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:HE8}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:HE8}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:HE8}} : eight-nodes linear hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:P15}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:P15}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:P15}} : fifteen-nodes quadratic prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:P18}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:P18}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:P18}} : eighteen-nodes quadratic prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:PE6}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:PE6}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:PE6}} : six-nodes linear prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:T10}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:T10}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:T10}} : ten-nodes quadratic tetrahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_nodes-Tuple{Any, Any, Any, Any, Any, Type{Val{:TE4}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_nodes","text":"printcelltype(io,iΩ,set,::Type{Val{:TE4}})\n\nIt writes to the output file the nodes of an element .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:TE4}} : four-nodes linear tetrahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:H20}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:H20}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:H20}} : twenty-nodes quadratic hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:H27}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:H27}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:H27}} : twentyseven-nodes quadratic hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:HE8}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:HE8}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:HE8}} : eight-nodes lienar hexahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:P15}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:P15}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:P15}} : fifteen-nodes quadratic prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:P18}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:P18}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:P18}} : fifteen-nodes quadratic prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:PE6}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:PE6}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:PE6}} : six-nodes lienar prism identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:T10}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:T10}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:T10}} : ten-nodes quadratic tetrahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.print_cell_type-Tuple{Any, Any, Any, Type{Val{:TE4}}}","page":"Library","title":"MORFEInvariantManifold.print_cell_type","text":"printcelltype(io,iΩ,set,::Type{Val{:TE4}})\n\nIt writes to the output file the correct cell type assuming .vtk format.\n\nio : file handler\niΩ : reference domain\nset : reference element number\n::Type{Val{:TE4}} : four-nodes linear tetrahedron identifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.read_mesh-Tuple{String, Any, Any, Vector{String}, Vector{Vector{Int64}}, Vector{Vector{Float64}}}","page":"Library","title":"MORFEInvariantManifold.read_mesh","text":"readmesh( meshfile::String, Ωlist::Vector{Vector{Int64}}, Γlist::Vector{Vector{Int64}}, mat::Vector{material}, bcdof::Vector{Vector{Int64}}, bcvals::Vector{Vector{Float64}})\n\nIt reads the mesh file and it inializes the grid data structure\n\nmesh_file : name of the mesh file to read\nΩ_list : list of domains in which the structures is organised\nΓ_list : list of boundaries\nmat : list of materials associated to each domain\nbc_dof : list of constrained degrees of freedom of each boundary\nbc_vals : boundary condition values\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.realification!-NTuple{7, Any}","page":"Library","title":"MORFEInvariantManifold.realification!","text":"realification!(Cp,Wr,fr,p,ndofs,neq,rmat)\n\nIt realifies mappings and reduced dynamics for an order p of the parametrisation\n\nCp : Parametrisation data structure\nWr : real-valued mapping\nfr : real-valued reduced dynamics\np : order of the asymptotic development\nndofs : number of degrees of freedom\nneq : number of equations\nrmat : realification matrix R\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.recursive_assembly!","page":"Library","title":"MORFEInvariantManifold.recursive_assembly!","text":"recursive_assembly!(Cp,ndofs,p,mesh,U,ic,cc,nls=0)\n\nIt assembles all right hand sides of the homological equations for a given order p of the expansion of the ε⁰ development\n\nCp : parametrisation data structure\nndofs : number of degrees of freedom\np : order of the asymptotic development\nmesh : mesh data structure\nU : dispalcement field\nic : index combination of a given monomial\ncc : counter of the asymptotic development\nnls : tag for the nonlinear static analysis. 0 = yes, 1 = yes\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.recursive_assembly_veps!","page":"Library","title":"MORFEInvariantManifold.recursive_assembly_veps!","text":"recursiveassemblyveps!(Cp,Cp⁺,ndofs,p,mesh,U,Cic,cc,nls=0)\n\nIt assembles right hand sides of all homological equations for a given order p of the expansion.\n\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nndofs : number of degrees of freedom\np : order of the asymptotic development\nmesh : grid data structure\nU : displacement field\nCic : monomials index combination\ncc : recursion depth\nnls : nonlinear static solution. 0 = no, 1 = yes.\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.recursive_pm!-NTuple{11, Any}","page":"Library","title":"MORFEInvariantManifold.recursive_pm!","text":"recursivepm!(Cp,Wr,fr,Cic,Ric,pmcomb,p,ndofs,neq,comb,cc)\n\nIt realifies mappings and reduced dynamics of a given index combination comb of order p.\n\nCp : parametrisation data structure\nWr : real-valued mappings\nfr : real-valued reduced dynamics\nCic : complex-valued parametrisation index combination of a given monomial\nRic : real-valued parametrisation index combination of a given monomial\npm_comb : +- combinations\np : order of the asymptotic development\nndofs : number of degrees of freedom\nneq : number of equations\ncomb : reference index combination of the realified monomial\ncc : recursion depth\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.save_matcont_rdyn-Tuple{Any, Any, Any}","page":"Library","title":"MORFEInvariantManifold.save_matcont_rdyn","text":"savematcontrdyn(rdyn,ndofs,outdir)\n\nIt saves the autonomous reduced dynamics in a format suitable for matcont GUI usage.\n\nrdyn : reduced dynamics in matcont format style\nndofs : number of degrees of freedom\noutdir : output directory\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.save_matcont_rdyn_nonautonomous-NTuple{4, Any}","page":"Library","title":"MORFEInvariantManifold.save_matcont_rdyn_nonautonomous","text":"savematcontrdyn(rdyn,ndofs,outdir)\n\nIt saves the non-autonomous reduced dynamics in a format suitable for matcont GUI usage.\n\nrdyn : reduced dynamics in matcont format style\nndofs : number of degrees of freedom\noutdir : output directory\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.solve_homological!-NTuple{11, Any}","page":"Library","title":"MORFEInvariantManifold.solve_homological!","text":"solvehomological!(Cp,ndofs,p,sysmat,sysrhs,sysres,ic,style,M,C,K)\n\nIt solves al homological equations for a given order of the asymtptotic developmet of the ε⁰-invariance.\n\nCp : parametrisation structure\nndofs : number of degrees of freedom\np : order of the asymptotic developmet\nsys_mat : matrix used to solve the homological equations\nsys_rhs : right hand side of the homological equations\nsys_res : residual of the homological equations\nic : index combination\nstyle : parametrisation style\nM : mass matrix\nC : damping matrix\nK : stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.solve_homological_veps!-NTuple{13, Any}","page":"Library","title":"MORFEInvariantManifold.solve_homological_veps!","text":"solvehomologicalveps!(η,Cp,Cp⁺,ndofs,p,sysmat,sysrhs,sys_res,style,ic,M,C,K)\n\nIt solves al homological equations for a given order of the asymtptotic developmet of the ε¹-invariance.\n\nη : eigenvalue associated to the non-autonomous forcing\nCp : autonomous parametrisation data structure\nCp⁺ :  non-auonomous parametrisation data structure\nndofs : number of degrees of freedom\np : order of the asymptotic development\nsys_mat : homological equation matrix\nsys_rhs : homological equation right hand side\nsys_res : homological equation residual\nstyle : parametrisation style\nic : index combination\nM : mass matrix\nC : damping matrix\nK : stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.structure_odir","page":"Library","title":"MORFEInvariantManifold.structure_odir","text":"structure_odir(odir::String, id::Int64, tag = 'a')\n\nIt creates the sub-folders that stores the output of the analysis\n\nodir : global output folder path\nid : number of computed step. Autonomous is zero, non-autonomous in increasing order\ntag : 'a' = autonomous, 'na' = non-autonomous\n\n\n\n\n\n","category":"function"},{"location":"library_all/#MORFEInvariantManifold.update_field!-Tuple{MORFEInvariantManifold.Field, Vector{Float64}}","page":"Library","title":"MORFEInvariantManifold.update_field!","text":"update_field!(ϕ::Field,U::Vector{Float64})\n\nit overwrites free dofs values using the solution U\n\nϕ : field to update\nU : solution vector\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:H20}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:H20}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:H20}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:H27}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:H27}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:H27}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:HE8}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:HE8}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a H8 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:HE8}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:P15}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:P15}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:P15}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:P18}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:P18}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:P18}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:PE6}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:PE6}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:PE6}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:T10}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:T10}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:T10}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a!-Tuple{Array{Float64, N} where N, Tuple, Type{Val{:TE4}}}","page":"Library","title":"MORFEInvariantManifold.∂N∂a!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:TE4}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:TE4}} : element type specifier\n\n\n\n\n\n","category":"method"},{"location":"library_all/#MORFEInvariantManifold.∂N∂a27!-Tuple{Array{Float64, N} where N, Tuple}","page":"Library","title":"MORFEInvariantManifold.∂N∂a27!","text":"∂N∂a!(∂N∂a::Array{Float64},gp::Tuple,::Type{Val{:H27}})\n\nIt fills ∂N∂a with the derivatives of the shape functions of a T4 element evaluated at gauss point gp.\n\n∂N∂a : shape functions derivatives Array\ngp : gauss point coordinates\n:Type{Val{:H27}} : element type specifier\n\n\n\n\n\n","category":"method"}]
}
